{
    "contents" : "#*************************************************************\n  #** Matching Models\n#*************************************************************\n\n  #********************\n  #** R code for matching\n#********************\n  #** Run the matching procedure by copying this code into R\n#/*\n\n  ## You need to set your working directory to where the dataset is.\n\n  ## Reading in the data\n  library(foreign)\nlibrary(Zelig)\ndata<-read.dta(\"cwdata.dta\", convert.underscore=T)\n\n##################################################\n## MATCHING\n\n## The model (to create the data for matching)\nform3<- (prio ~ aidshock11 + lPTSave.filled + lassassinbanks + lriotsbanks + lstrikesbanks\n         + ldemonstrationsbanks + linfantmort + lnciv\n         + lpartautocracy + lpartdemocracy + lfactionaldemoc\n         + lfulldemocracy\n         + lln.rgdpc + lln.population + loil + linstab\n         + ethfrac + relfrac + ncontig + logmtn + ColdWar\n         + .spline1 + .spline2 + .spline3\n         + year  ## year is in here so that we have it later\n)\n\nm2<-zelig(form3, data=data, model=\"relogit\")\nsummary(m2)\n\nnrow(m2$data)  ## should be 2627 -- same as main model\n\n## get rid of the observations that aren't in the main model\ndata <- data[as.numeric(rownames(m2$data)),]\nrownames(data) <- row(data)[,1]\n\n## Make a figure of the distribution of aid change with AID SHOCKS in gray\nhist(data$smaidch)\n\n## get the current directory\ncurrentpath <- getwd()\n\n## the new path\noutdir <- paste(currentpath,\"/output\", sep=\"\")\ncrapdir <- paste(currentpath,\"/crap\", sep=\"\")\n\n## set the new directory to the output folder to save the figure\nsetwd(outdir)\npdf(file = \"AidChangeDist.pdf\", width = 7, height = 6)\npar(mar=c(5,6,5,2)+.01)\nplot(density(na.omit(data$smaidch)),type=\"n\", main=\"Distribution of Changes in Aid\", xlim=c(-.05,.05),\n     xlab=\"Changes in Aid/GDP\",\n     ylab=\"Density\n     (Number of observations at a given level of Aid Change)\",\n     axes=F)\n#abline(v=quantile(na.omit(data$smaidch), probs=.15), lty=2)\n#legend(x=\"topright\",c(\"  15th Percentile\",\"(Aid Shock Cut-off)\"), lty=c(1,0),box.lty=0)\nlegend(x=\"topleft\",c(\"Lowest 15 Percent\",\"(Coded as Aid Shocks)\",\"\",\n                     \"Upper 15 Percent\",\"(Coded as Positive Aid Shocks)\"),\n       pch=c(15,NA,NA,15,NA),box.lty=0,col=c(\"gray35\",\"gray65\"))\nxvals2 <- c(density(na.omit(data$smaidch))$x,rev(density(na.omit(data$smaidch))$x))\nyvals2 <- c(density(na.omit(data$smaidch))$y, rep(0,length(density(na.omit(data$smaidch))$y)))\npolygon( xvals2,yvals2, col=\"gray65\", lty=0)\n\n## for positive aid shocks\ncutoff <- quantile(na.omit(data$smaidch), probs=.85)\ncutoff\nxvals <- c(density(na.omit(data$smaidch))$x[density(na.omit(data$smaidch))$x<cutoff],rev(density(na.omit(data$smaidch))$x[density(na.omit(data$smaidch))$x<cutoff]))\nyvals <- c(density(na.omit(data$smaidch))$y[density(na.omit(data$smaidch))$x<cutoff], rep(0,length(density(na.omit(data$smaidch))$y[density(na.omit(data$smaidch))$x<cutoff])))\npolygon( xvals,yvals, col=\"gray95\", lty=0)\n## for negative shocks\ncutoff <- quantile(na.omit(data$smaidch), probs=.15)\ncutoff\nxvals <- c(density(na.omit(data$smaidch))$x[density(na.omit(data$smaidch))$x<cutoff],rev(density(na.omit(data$smaidch))$x[density(na.omit(data$smaidch))$x<cutoff]))\nyvals <- c(density(na.omit(data$smaidch))$y[density(na.omit(data$smaidch))$x<cutoff], rep(0,length(density(na.omit(data$smaidch))$y[density(na.omit(data$smaidch))$x<cutoff])))\npolygon( xvals,yvals, col=\"gray35\", lty=0)\nlines(density(na.omit(data$smaidch)))\naxis(1,at=seq(-.06,.06,.02),labels=T)\naxis(2,at=seq(0,200,50),labels=T)\ndev.off()\n## set the directory back to the original directory\nsetwd(currentpath)\n\nsummary(data$smaidch)\n\n## we run it again\n## The model (to create the data for matching)\nform3<- (prio ~ aidshock11 + lPTSave.filled + lassassinbanks + lriotsbanks + lstrikesbanks\n         + ldemonstrationsbanks + linfantmort + lnciv\n         + lpartautocracy + lpartdemocracy + lfactionaldemoc\n         + lfulldemocracy\n         + lln.rgdpc + lln.population + loil + linstab\n         + ethfrac + relfrac + ncontig + logmtn + ColdWar\n         + .spline1 + .spline2 + .spline3\n         + year  ## year is in here so that we have it later\n)\n\nm2<-zelig(form3, data=data, model=\"relogit\")\nsummary(m2)\n\n\n## Matching Procedure\nlibrary(MatchIt)\n\nhead(m2$model[2:26])\nm.dat2 <- cbind(m2$model[2:26],m2$y)\n\n## with the additional covariates\nmatch.form3<- (aidshock11 ~ lPTSave.filled + lassassinbanks + lriotsbanks + lstrikesbanks\n               + ldemonstrationsbanks + linfantmort + lnciv\n               + lpartautocracy + lpartdemocracy + lfactionaldemoc\n               + lfulldemocracy\n               + lln.rgdpc + lln.population + loil + linstab\n               + ethfrac + relfrac + ncontig + logmtn + ColdWar\n               + .spline1 + .spline2 + .spline3 )\n\n\n## Genetic WITH PITF vars (Takes 19 minutes on my machine)\nset.seed(1111)\nout.m <- matchit(match.form3, data=m.dat2,\n                 method=\"genetic\")\nalarm()\n\nsummary(out.m)\n\n#plot(out.m)\n\nhead(match.data(out.m))\nout<-cbind(data$countryname[as.numeric(rownames(match.data(out.m)))],\n           data$year[as.numeric(rownames(match.data(out.m)))],\n           (match.data(out.m)))\n\n## out$cunit is the treatmentid for treated units and the\n## id of the matched treated unit for control units\nout$cunit<-as.numeric(rownames(out))\nfor(i in 1:length(rownames(out.m$match.matrix))){\n  unit<-rownames(out.m$match.matrix)[i]\n  out$cunit[rownames(out)==unit]<- as.numeric(out.m$match.matrix[unit,1])\n}\n\nsetwd(crapdir)\nwrite.csv(out, file=\"matched data.csv\")\nsetwd(currentpath)\n\nnames(out)\nnames(data)\n\n## LOVE PLOT FUNCTION ###########################################################\n## Make a function to create love plots to assess balance\n\n## Example inputs\n#myformula <- t ~ age + education + black + hispanic + nodegree + married + re74 + re75\n#dataset1 <- lalonde\n#dataset2 <- match.data(m.out)\n\n## RED is the first dataset, BLUE is the second\n\nloveplot <- function(myformula, dataset1, dataset2,\n                     main=\"Standardized Means Before and After Matching\n                     RED is the first dataset, BLUE is the second\", varnames=NULL) {\n  ##  love.plot takes three arguments: (1) a formula where\n  ##  treatment ~ covariate1 + covariate 2 ...\n  ##  (2) an unmatched dataset, and (3) a matched dataset\n\n  data1 <- model.frame(myformula,data=dataset1)\n  data2 <- model.frame(myformula,data=dataset2)\n\n  X1 <- model.matrix(myformula, dataset1)[,-1]\n  X2 <- model.matrix(myformula, dataset2)[,-1]\n\n  t1 <- model.extract(data1,\"response\")\n  t2 <- model.extract(data2,\"response\")\n\n  varnames1 <- colnames(X1)\n  varnames2 <- colnames(X2)\n\n  X1.t <- X1[t1==1,]\n  X1.c <- X1[t1==0,]\n\n  X2.t <- X2[t2==1,]\n  X2.c <- X2[t2==0,]\n\n  dif.means1 <- (apply(X1.t, MAR=2, FUN=mean) - apply(X1.c, MAR=2, FUN=mean))/apply(X1, MAR=2, FUN=sd)\n  dif.means2 <- (apply(X2.t, MAR=2, FUN=mean) - apply(X2.c, MAR=2, FUN=mean))/apply(X2, MAR=2, FUN=sd)\n\n  ## make the plot\n  par(mar=c(5,9,5,2)+.1)\n  plot(x=dif.means1, y = rev(seq(1,length(dif.means1),1)), type=\"n\",\n       main=main,\n       xlab = \"(mean treated - mean control)/sd treated\", ylab=\"\", axes=F,\n       xlim=c( min(c(dif.means1,dif.means2)),  max(c(dif.means1,dif.means2)))\n       #xlim=c( min(c(dif.means1,dif.means2,-.02)),  max(c(dif.means1,dif.means2,.02)))\n  )\n  abline(v=0, lty=2)\n  for(i in 1:length(dif.means1)){\n    abline(h=i, col=\"gray80\")\n  }\n  points(x=dif.means1, y = rev(seq(1,length(dif.means1),1)), col=\"red\", pch=1)\n  points(x=dif.means2, y = rev(seq(1,length(dif.means2),1)), col=\"blue\", pch=1)\n  one.is.better <- data.frame(cbind(rev(seq(1,length(dif.means1),1)),\n                                    abs(dif.means1) < abs(dif.means2),\n                                    dif.means1))\n  points(x=one.is.better[,3][one.is.better[,2]==1],\n         y=one.is.better[,1][one.is.better[,2]==1],\n         col=\"red\", pch=19)\n  two.is.better <- data.frame(cbind(rev(seq(1,length(dif.means1),1)),\n                                    abs(dif.means1) > abs(dif.means2),\n                                    dif.means2))\n  points(x=two.is.better[,3][two.is.better[,2]==1],\n         y=two.is.better[,1][two.is.better[,2]==1],\n         col=\"blue\", pch=19)\n  #axis(1, at=rev(seq( round(min(dif.means1),.5)) , round(max(dif.means1),.5),length.out = 5), labels=T)\n  axis(1, at=seq(-100,100,.5), labels=T)\n  if(is.null(varnames)){\n    varnames <- colnames(X1)\n  }\n  axis(2, at=rev(seq(1,length(dif.means1),1)), labels=varnames, las=2)\n\n\n  ## add a key so I can remember\n  #legend(x=\"topleft\", legend=c(\"1\",\"2\"), bty=\"n\",text.col=c(2,4), horiz=T)\n  }\n## END LOVE PLOT FUNCTION ###################################################\n\nform <- (aidshock11 ~ lPTSave.filled + lassassinbanks + lriotsbanks + lstrikesbanks\n         + ldemonstrationsbanks + linfantmort + lnciv\n         + lpartautocracy + lpartdemocracy + lfactionaldemoc\n         + lfulldemocracy\n         + lln.rgdpc + lln.population + loil + linstab\n         + ethfrac + relfrac + ncontig + logmtn + ColdWar)\n#+ .spline1 + .spline2 + .spline3 )\n\n\nsetwd(outdir)\njpeg(filename = \"Genmatch Loveplot.jpg\", width = 6.5, height = 6, res=200,\n     units = \"in\")\nloveplot(form,out,data,\n         main=\"\",\n         varnames=c(\"Human Rights Abuse\",\"Assassinations\",\"Riots\",\"Strikes\",\"Demonstrations\",\n                    \"Infant Mortality\",\"Bad Neighborhood\",\"Partial Autocracy\",\n                    \"Partial Democracy\",\"Factional Democracy\",\"Full Democracy\",\"GDP pc\",\n                    \"Population\",\"Oil\",\"Instability\",\"Ethnic Frac.\",\"Religious Frac.\",\n                    \"Noncontiguous\",\"Mountains\",\"Cold War\") )\n\ntitle(expression(\"Improved Mean Balance: \" * phantom(\"Matched \") *\n                   \"vs. \" * phantom(\"Unmatched               \")),col.main=\"black\")\ntitle(expression(phantom(\"Improved Mean Balance: \") * \"Matched \" *\n                   phantom(\"vs. \") * phantom(\"Unmatched               \")),col.main=\"red\")\ntitle(expression(phantom(\"Improved Mean Balance: \") * phantom(\"Matched \") *\n                   phantom(\"vs. \") * \"Unmatched               \"),col.main=\"blue\")\ndev.off()\n\nsetwd(currentpath)\n\n## propensity score matching\n## write the data so I can run the model in stata\nout1<-cbind(data$countryname[as.numeric(rownames(m.dat2))], m.dat2)\nsetwd(crapdir)\nwrite.csv(out1, file=\"mdat2.csv\")\nsetwd(currentpath)\n\n** in Stata -- just copy and paste this into stata with the directories\n**             set to the path where the datasets are\n\ninsheet using \"crap/mdat2.csv\", clear\nrename  datacountrynameasnumericrownames countryname\negen countrynum = group(countryname)\ntsset countrynum year\n\nxtlogit aidshock11 lptsavefilled lassassinbanks lriotsbanks lstrikesbanks ldemonstrationsbanks linfantmort lnciv lpartautocracy lpartdemocracy lfactionaldemoc lfulldemocracy llnrgdpc llnpopulation loil linstab ethfrac relfrac ncontig logmtn coldwar spline1 spline2 spline3, re\ngen samp = e(sample)\npredict pscore if samp==1\nsort pscore\noutreg2 using \"output/pscoremodel\", word append\n\nsave \"crap/pscoredat.dta\", replace\n\n\n## back in R\nsetwd(crapdir)\nlibrary(foreign)\ndat <- read.dta(\"pscoredat.dta\")\nhead(dat)\n## order them by pscore\ndat <- dat[rev(order(dat$pscore)),]\n\ntdat <- dat[dat$aidshock11==1,]\ncdat <- dat[dat$aidshock11==0,]\ncdattemp <- cdat\n\nmatchdat <- c()\nfor(i in 1:nrow(tdat)){\n  tunit <- tdat[i,]\n  t <- tunit$pscore\n  cpool <- cdattemp$pscore\n  cunit <- cdattemp[which(abs((t-cpool))==min(abs(t-cpool))),]\n  newmatch <- rbind(tunit, cunit)\n  matchdat <- rbind(matchdat,newmatch)\n}\n\nnrow(matchdat)\n\nwrite.csv(matchdat, file=\"psmatchdat.csv\")\n\n\n## LOVE PLOT FUNCTION ###########################################################\n## Make a function to create love plots to assess balance\n\n## Example inputs\n#myformula <- t ~ age + education + black + hispanic + nodegree + married + re74 + re75\n#dataset1 <- lalonde\n#dataset2 <- match.data(m.out)\n\n## RED is the first dataset, BLUE is the second\n\nloveplot <- function(myformula, dataset1, dataset2,\n                     main=\"Standardized Means Before and After Matching\n                     RED is the first dataset, BLUE is the second\", varnames=NULL) {\n  ##  love.plot takes three arguments: (1) a formula where\n  ##  treatment ~ covariate1 + covariate 2 ...\n  ##  (2) an unmatched dataset, and (3) a matched dataset\n\n  data1 <- model.frame(myformula,data=dataset1)\n  data2 <- model.frame(myformula,data=dataset2)\n\n  X1 <- model.matrix(myformula, dataset1)[,-1]\n  X2 <- model.matrix(myformula, dataset2)[,-1]\n\n  t1 <- model.extract(data1,\"response\")\n  t2 <- model.extract(data2,\"response\")\n\n  varnames1 <- colnames(X1)\n  varnames2 <- colnames(X2)\n\n  X1.t <- X1[t1==1,]\n  X1.c <- X1[t1==0,]\n\n  X2.t <- X2[t2==1,]\n  X2.c <- X2[t2==0,]\n\n  dif.means1 <- (apply(X1.t, MAR=2, FUN=mean) - apply(X1.c, MAR=2, FUN=mean))/apply(X1, MAR=2, FUN=sd)\n  dif.means2 <- (apply(X2.t, MAR=2, FUN=mean) - apply(X2.c, MAR=2, FUN=mean))/apply(X2, MAR=2, FUN=sd)\n\n  ## make the plot\n  par(mar=c(5,9,5,2)+.1)\n  plot(x=dif.means1, y = rev(seq(1,length(dif.means1),1)), type=\"n\",\n       main=main,\n       xlab = \"(mean treated - mean control)/sd treated\", ylab=\"\", axes=F,\n       xlim=c( min(c(dif.means1,dif.means2)),  max(c(dif.means1,dif.means2)))\n       #xlim=c( min(c(dif.means1,dif.means2,-.02)),  max(c(dif.means1,dif.means2,.02)))\n  )\n  abline(v=0, lty=2)\n  for(i in 1:length(dif.means1)){\n    abline(h=i, col=\"gray80\")\n  }\n  points(x=dif.means1, y = rev(seq(1,length(dif.means1),1)), col=\"red\", pch=1)\n  points(x=dif.means2, y = rev(seq(1,length(dif.means2),1)), col=\"blue\", pch=1)\n  one.is.better <- data.frame(cbind(rev(seq(1,length(dif.means1),1)),\n                                    abs(dif.means1) < abs(dif.means2),\n                                    dif.means1))\n  points(x=one.is.better[,3][one.is.better[,2]==1],\n         y=one.is.better[,1][one.is.better[,2]==1],\n         col=\"red\", pch=19)\n  two.is.better <- data.frame(cbind(rev(seq(1,length(dif.means1),1)),\n                                    abs(dif.means1) > abs(dif.means2),\n                                    dif.means2))\n  points(x=two.is.better[,3][two.is.better[,2]==1],\n         y=two.is.better[,1][two.is.better[,2]==1],\n         col=\"blue\", pch=19)\n  #axis(1, at=rev(seq( round(min(dif.means1),.5)) , round(max(dif.means1),.5),length.out = 5), labels=T)\n  axis(1, at=seq(-100,100,.5), labels=T)\n  if(is.null(varnames)){\n    varnames <- colnames(X1)\n  }\n  axis(2, at=rev(seq(1,length(dif.means1),1)), labels=varnames, las=2)\n\n\n  ## add a key so I can remember\n  #legend(x=\"topleft\", legend=c(\"1\",\"2\"), bty=\"n\",text.col=c(2,4), horiz=T)\n  }\n## END LOVE PLOT FUNCTION ###################################################\n\nform <- (aidshock11 ~ lPTSave.filled + lassassinbanks + lriotsbanks + lstrikesbanks\n         + ldemonstrationsbanks + linfantmort + lnciv\n         + lpartautocracy + lpartdemocracy + lfactionaldemoc\n         + lfulldemocracy\n         + lln.rgdpc + lln.population + loil + linstab\n         + ethfrac + relfrac + ncontig + logmtn + ColdWar)\n#+ .spline1 + .spline2 + .spline3 )\n\nmatchdat2 <- matchdat\ncolnames(matchdat2) <- gsub(\"lptsavefilled\", \"lPTSave.filled\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"llnrgdpc\", \"lln.rgdpc\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"llnpopulation\", \"lln.population\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"coldwar\", \"ColdWar\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"spline1\", \".spline1\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"spline2\", \".spline2\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"spline3\", \".spline3\", colnames(matchdat2),fixed=T)\n\nsetwd(outdir)\njpeg(filename = \"Pscore Loveplot.jpg\", width = 6.5, height = 6, res=200,\n     units = \"in\")\nloveplot(form,matchdat2,data,\n         main=\"\",\n         varnames=c(\"Human Rights Abuse\",\"Assassinations\",\"Riots\",\"Strikes\",\"Demonstrations\",\n                    \"Infant Mortality\",\"Bad Neighborhood\",\"Partial Autocracy\",\n                    \"Partial Democracy\",\"Factional Democracy\",\"Full Democracy\",\"GDP pc\",\n                    \"Population\",\"Oil\",\"Instability\",\"Ethnic Frac.\",\"Religious Frac.\",\n                    \"Noncontiguous\",\"Mountains\",\"Cold War\") )\n\ntitle(expression(\"Improved Mean Balance: \" * phantom(\"Matched \") *\n                   \"vs. \" * phantom(\"Unmatched               \")),col.main=\"black\")\ntitle(expression(phantom(\"Improved Mean Balance: \") * \"Matched \" *\n                   phantom(\"vs. \") * phantom(\"Unmatched               \")),col.main=\"red\")\ntitle(expression(phantom(\"Improved Mean Balance: \") * phantom(\"Matched \") *\n                   phantom(\"vs. \") * \"Unmatched               \"),col.main=\"blue\")\ndev.off()\nsetwd(currentpath)\n\n\n## Code to put the two love plots on top of each other\n\n\n## LOVE PLOT FUNCTION ###########################################################\n## Make a function to create love plots to assess balance\n\n## Example inputs\n#myformula <- t ~ age + education + black + hispanic + nodegree + married + re74 + re75\n#dataset1 <- lalonde\n#dataset2 <- match.data(m.out)\n\n## RED is the first dataset, BLUE is the second\n\nloveplot <- function(myformula, dataset1, dataset2,\n                     main=\"Standardized Means Before and After Matching\n                     RED is the first dataset, BLUE is the second\", varnames=NULL) {\n  ##  love.plot takes three arguments: (1) a formula where\n  ##  treatment ~ covariate1 + covariate 2 ...\n  ##  (2) an unmatched dataset, and (3) a matched dataset\n\n  data1 <- model.frame(myformula,data=dataset1)\n  data2 <- model.frame(myformula,data=dataset2)\n\n  X1 <- model.matrix(myformula, dataset1)[,-1]\n  X2 <- model.matrix(myformula, dataset2)[,-1]\n\n  t1 <- model.extract(data1,\"response\")\n  t2 <- model.extract(data2,\"response\")\n\n  varnames1 <- colnames(X1)\n  varnames2 <- colnames(X2)\n\n  X1.t <- X1[t1==1,]\n  X1.c <- X1[t1==0,]\n\n  X2.t <- X2[t2==1,]\n  X2.c <- X2[t2==0,]\n\n  dif.means1 <- (apply(X1.t, MAR=2, FUN=mean) - apply(X1.c, MAR=2, FUN=mean))/apply(X1, MAR=2, FUN=sd)\n  dif.means2 <- (apply(X2.t, MAR=2, FUN=mean) - apply(X2.c, MAR=2, FUN=mean))/apply(X2, MAR=2, FUN=sd)\n\n  ## make the plot\n  par(mar=c(5,9,5,2)+.1)\n  plot(x=dif.means1, y = rev(seq(1,length(dif.means1),1)), type=\"n\",\n       main=main,\n       xlab = \"(mean treated - mean control)/sd treated\", ylab=\"\", axes=F,\n       xlim=c( min(c(dif.means1,dif.means2)),  max(c(dif.means1,dif.means2)))\n       #xlim=c( min(c(dif.means1,dif.means2,-.02)),  max(c(dif.means1,dif.means2,.02)))\n  )\n  abline(v=0, lty=2)\n  for(i in 1:length(dif.means1)){\n    abline(h=i, col=\"gray80\")\n  }\n  points(x=dif.means1, y = rev(seq(1,length(dif.means1),1)), col=\"red\", pch=1)\n  points(x=dif.means2, y = rev(seq(1,length(dif.means2),1)), col=\"blue\", pch=1)\n  one.is.better <- data.frame(cbind(rev(seq(1,length(dif.means1),1)),\n                                    abs(dif.means1) < abs(dif.means2),\n                                    dif.means1))\n  points(x=one.is.better[,3][one.is.better[,2]==1],\n         y=one.is.better[,1][one.is.better[,2]==1],\n         col=\"red\", pch=19)\n  two.is.better <- data.frame(cbind(rev(seq(1,length(dif.means1),1)),\n                                    abs(dif.means1) > abs(dif.means2),\n                                    dif.means2))\n  points(x=two.is.better[,3][two.is.better[,2]==1],\n         y=two.is.better[,1][two.is.better[,2]==1],\n         col=\"blue\", pch=19)\n  #axis(1, at=rev(seq( round(min(dif.means1),.5)) , round(max(dif.means1),.5),length.out = 5), labels=T)\n  axis(1, at=seq(-100,100,.5), labels=T)\n  if(is.null(varnames)){\n    varnames <- colnames(X1)\n  }\n  axis(2, at=rev(seq(1,length(dif.means1),1)), labels=varnames, las=2)\n\n\n  ## add a key so I can remember\n  #legend(x=\"topleft\", legend=c(\"1\",\"2\"), bty=\"n\",text.col=c(2,4), horiz=T)\n  }\n## END LOVE PLOT FUNCTION ###################################################\n\n\n## Pscore balance\nsetwd(crapdir)\nmatchdat <- read.csv(file=\"psmatchdat.csv\")\n\nform <- (aidshock11 ~ lPTSave.filled + lassassinbanks + lriotsbanks + lstrikesbanks\n         + ldemonstrationsbanks + linfantmort + lnciv\n         + lpartautocracy + lpartdemocracy + lfactionaldemoc\n         + lfulldemocracy\n         + lln.rgdpc + lln.population + loil + linstab\n         + ethfrac + relfrac + ncontig + logmtn + ColdWar)\n#+ .spline1 + .spline2 + .spline3 )\n\nmatchdat2 <- matchdat\ncolnames(matchdat2) <- gsub(\"lptsavefilled\", \"lPTSave.filled\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"llnrgdpc\", \"lln.rgdpc\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"llnpopulation\", \"lln.population\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"coldwar\", \"ColdWar\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"spline1\", \".spline1\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"spline2\", \".spline2\", colnames(matchdat2),fixed=T)\ncolnames(matchdat2) <- gsub(\"spline3\", \".spline3\", colnames(matchdat2),fixed=T)\n\n## make the combined love plot\nsetwd(outdir)\njpeg(filename = \"Combined Loveplots.jpg\", width = 12, height = 6, res=200,\n     units = \"in\")\n\npar(mfrow=c(1,2))\n\nloveplot(form,matchdat2,data,\n         main=\"\",\n         varnames=c(\"Human Rights Abuse\",\"Assassinations\",\"Riots\",\"Strikes\",\"Demonstrations\",\n                    \"Infant Mortality\",\"Bad Neighborhood\",\"Partial Autocracy\",\n                    \"Partial Democracy\",\"Factional Democracy\",\"Full Democracy\",\"GDP pc\",\n                    \"Population\",\"Oil\",\"Instability\",\"Ethnic Frac.\",\"Religious Frac.\",\n                    \"Noncontiguous\",\"Mountains\",\"Cold War\") )\n\ntitle(expression(\"Propensity Score Matching: \" * phantom(\"Matched \") *\n                   \"vs. \" * phantom(\"Unmatched               \")),col.main=\"black\")\ntitle(expression(phantom(\"Propensity Score Matching: \") * \"Matched \" *\n                   phantom(\"vs. \") * phantom(\"Unmatched               \")),col.main=\"red\")\ntitle(expression(phantom(\"Propensity Score Matching: \") * phantom(\"Matched \") *\n                   phantom(\"vs. \") * \"Unmatched               \"),col.main=\"blue\")\n\n\n\n## Genetic matching balance\n\nsetwd(crapdir)\nout <- read.csv(file=\"matched data.csv\")\nsetwd(outdir)\nnames(out)\nnames(data)\n\nform <- (aidshock11 ~ lPTSave.filled + lassassinbanks + lriotsbanks + lstrikesbanks\n         + ldemonstrationsbanks + linfantmort + lnciv\n         + lpartautocracy + lpartdemocracy + lfactionaldemoc\n         + lfulldemocracy\n         + lln.rgdpc + lln.population + loil + linstab\n         + ethfrac + relfrac + ncontig + logmtn + ColdWar)\n#+ .spline1 + .spline2 + .spline3 )\n\nloveplot(form,out,data,\n         main=\"\",\n         varnames=c(\"Human Rights Abuse\",\"Assassinations\",\"Riots\",\"Strikes\",\"Demonstrations\",\n                    \"Infant Mortality\",\"Bad Neighborhood\",\"Partial Autocracy\",\n                    \"Partial Democracy\",\"Factional Democracy\",\"Full Democracy\",\"GDP pc\",\n                    \"Population\",\"Oil\",\"Instability\",\"Ethnic Frac.\",\"Religious Frac.\",\n                    \"Noncontiguous\",\"Mountains\",\"Cold War\") )\n\ntitle(expression(\"Genetic Matching: \" * phantom(\"Matched \") *\n                   \"vs. \" * phantom(\"Unmatched               \")),col.main=\"black\")\ntitle(expression(phantom(\"Genetic Matching: \") * \"Matched \" *\n                   phantom(\"vs. \") * phantom(\"Unmatched               \")),col.main=\"red\")\ntitle(expression(phantom(\"Genetic Matching: \") * phantom(\"Matched \") *\n                   phantom(\"vs. \") * \"Unmatched               \"),col.main=\"blue\")\n\ndev.off()\n\n## reset the working directory\nsetwd(currentpath)\n\n## Set working directory to where the data is\n\n###############################################\n\n## set the new path from the current one\ncurrentpath <- getwd()\nsetwd(paste(currentpath,\"/crap\",sep=\"\"))\n\nlibrary(foreign)\ndat <- read.dta(\"tempM.dta\")\n\ndat2 <- subset(dat, select=c(\"cunit\",\"countryname\"))\n\ncunits <- unique(dat$cunit)\nholder <- rep(NA,length(cunits))\nfor(i in 1:length(cunits)){\n  c <- cunits[i]\n  cnames <- dat$countryname[dat$cunit==c]\n  ucnames <- unique(cnames)\n  if(length(ucnames)<length(cnames)) {\n    holder[i] <- 1\n  } else {\n    holder[i] <- 0\n  }\n}\n\nmean(holder)  ## this is the overall number of same-country matches.\n# [1] 0.8918\n\n## reset the working directory\nsetwd(currentpath)\n\n--------------------------------------\n\n  ## Make the plot in R\n  ## Set working directory to the location of the data\n\n  ## then set the path we need from this path\n  currentpath <- getwd()\nsetwd(paste(currentpath,\"/output\",sep=\"\"))\n\npdf(file=\"ShockCutoffsFig.pdf\",width = 6.5, height = 5)\n#jpeg(filename = \"ShockCutoffsFig.jpg\", width = 6.5, height = 5, res=200,\n#     units = \"in\")\ndat <- read.csv(\"shockCIs.csv\")\n\ndat <- dat[-1,]\ndat <- na.omit(dat)\n\nx <- as.numeric(rownames(dat))+3\n\ny <- dat[,1]\nL <- y - 1.96*sqrt(dat[,2])\nU <- y + 1.96*sqrt(dat[,2])\n\nplot(x,y, type=\"l\", ylim=c(-1,2),\n     xlim=c(5,35),\n     axes=F,\n     lwd=2,\n     xlab=\"Percentile Cutoff for Aid Shocks\", ylab=\"Estimated Aid Shock Coefficient\",\n     main=\"The Estimated Effect of Aid Shocks with Different Cut-offs\")\n#points(x,y, pch=20)\nabline(h=0, col=\"gray50\", lwd=2)\nlines(x,L,lty=2)\nlines(x,U,lty=2)\n\n#abline(v=10, lty=3, col=\"gray\")\n#abline(v=15, lty=3, col=\"gray\")\n#abline(v=20, lty=3, col=\"gray\")\n#abline(v=30, lty=3, col=\"gray\")\n#abline(v=40, lty=3, col=\"gray\")\n\naxis(1,at=seq(0,35,5),labels=T)\n#axis(2,at=seq(-.01,.04,.01), labels=T)\naxis(2,at=seq(-1,2,1), labels=T)\n#text(x=14, y=.015, \"Actual Cutoff\", srt=90)\n\ndev.off()\n\n## The reason this plot is choppy after about 37 is that at this point the value of the aid shock at the 37th percentile is very small\n##   At the 40th percentile, the value of \"smaidch\" is 0, meaning that there are a lot of 0s in the dataset.\n##   I should look at the distribution of this more carefully, but that's what's going on.\n\n## reset the working directory\nsetwd(currentpath)\n\n----------------------------------\n\n  ## Make the plot in R\n  ## Set working directory to the location of the data\n\n  ## then set the path we need from this path\n  currentpath <- getwd()\nsetwd(paste(currentpath,\"/output\",sep=\"\"))\n\njpeg(filename = \"PosShockCutoffsFig.jpg\", width = 6.5, height = 5, res=200,\n     units = \"in\")\ndat <- read.csv(\"posshockCIs.csv\")\n\ndat <- dat[-1,]\ndat <- na.omit(dat)\n\nx <- as.numeric(rownames(dat))+3 + 45\n\ny <- dat[,1]\nL <- y - 1.96*sqrt(dat[,2])\nU <- y + 1.96*sqrt(dat[,2])\n\nplot(x,y, type=\"l\", ylim=c(-1,2),\n     xlim=c(65,100),\n     axes=F,\n     lwd=2,\n     xlab=\"Percentile Cutoff for Positive Aid Shocks\", ylab=\"Positive Aid Shock Coefficient\",\n     main=\"The Estimated Effect of Positive Aid Shocks\n     with Different Cut-offs\")\n#points(x,y, pch=20)\nabline(h=0, col=\"gray50\", lwd=2)\nlines(x,L,lty=2)\nlines(x,U,lty=2)\n\n#abline(v=10, lty=3, col=\"gray\")\n#abline(v=15, lty=3, col=\"gray\")\n#abline(v=20, lty=3, col=\"gray\")\n#abline(v=30, lty=3, col=\"gray\")\n#abline(v=40, lty=3, col=\"gray\")\n\naxis(1,at=seq(65,100,5),labels=T)\n#axis(2,at=seq(-.01,.04,.01), labels=T)\naxis(2,at=seq(-1,2,1), labels=T)\n#text(x=14, y=.015, \"Actual Cutoff\", srt=90)\n\ndev.off()\n\n## The reason this plot is choppy after about 37 is that at this point the value of the aid shock at the 37th percentile is very small\n##   At the 40th percentile, the value of \"smaidch\" is 0, meaning that there are a lot of 0s in the dataset.\n##   I should look at the distribution of this more carefully, but that's what's going on.\n\n## reset the working directory\nsetwd(currentpath)\n\n-----------------------------------\n\n  ********************\n  ** R code to do multiple imputation\n********************\n  ** Run the following code in R\n/*\n\n  ## Set working directory to the location of the main dat\n\n  ## Set the path we need from that path\n  currentpath <- getwd()\nsetwd(paste(currentpath,\"/crap\",sep=\"\"))\n\nlibrary(Amelia)\n\ndat<-read.dta(\"data for impute.dta\")\n\nrbind(col(dat)[1,],head(dat))\nset.seed(12345)\n#out <- amelia(dat, ts=1, cs=2, idvars=3, polytime=2, intercs=F)\nout <- amelia(dat, ts=1, cs=2, idvars=3, polytime=3, intercs=F)\n\n\nwrite.amelia(out, \"outdata\")\n\n## reset the working directory\nsetwd(currentpath)\n\n\n  #*************\n  #** End R code\n#*************\n#######################\n\nlibrary(foreign)\n\n## Set working directory to the main folder\n\ncurrentpath <- getwd()\ncrappath <- paste(currentpath,\"/crap\",sep=\"\")\noutpath <- paste(currentpath,\"/output\",sep=\"\")\n\nsetwd(crappath)\ndat <- read.dta(\"aid shocks over time.dta\")\nyear <- dat[,1]\naidshocks <- dat[,2]\nsetwd(outpath)\npdf(file = \"AidShocksPerYear.pdf\",width = 6.5, height = 4.5)\n#jpeg(filename = \"AidShocksPerYear.jpg\", width = 6.5, height = 4.5, res=200,\n#     units = \"in\")\nplot(x=year, y=aidshocks, type=\"n\", main=\"Aid Shocks per Year \",\n     xlab=\"Year\", ylab=\"Number of Aid Shocks\",\n     ylim=c(0,50),\n     axes=F)\nabline(h=seq(0,50,10),lty=3, col=\"gray75\")\n#abline(h=0)\naxis(1,at=seq(1975,2010,5),labels=T)\naxis(2,at=seq(0,50,10), labels=T)\n## Stretch out the plot\nlines(cbind(year,aidshocks), lwd=2)\n##\n#segments(x0=year,x1=year,y0=rep(0,length(aidshocks)), y1=aidshocks,\n#         lwd=2, col=\"gray40\", lend=2)\n#lines(ksmooth(year,aidshocks, kernel=\"normal\",bandwidth=3),lty=2)\ndev.off()\n\n## reset the working directory\nsetwd(currentpath)\n\n######################\n",
    "created" : 1474242488574.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4115374551",
    "id" : "B0F4E2A4",
    "lastKnownWriteTime" : 1474239605,
    "path" : "~/Desktop/OSU/3º Semestre/Quant III/Project/ReplicationData/RepNielsenDoFileinR1.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}